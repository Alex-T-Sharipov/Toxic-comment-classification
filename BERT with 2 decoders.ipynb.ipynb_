{"cells":[{"cell_type":"markdown","metadata":{"id":"Cb4espuLKJiA"},"source":["##### Copyright 2020 The TensorFlow Hub Authors.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","id":"jM3hCI1UUzar"},"outputs":[],"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."]},{"cell_type":"markdown","metadata":{"id":"4_NEJlxKKjyI"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://www.tensorflow.org/text/tutorials/classify_text_with_bert\"><img src=\"https://www.tensorflow.org/images/tf_logo_32px.png\" />View on TensorFlow.org</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/text/blob/master/docs/tutorials/classify_text_with_bert.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/text/blob/master/docs/tutorials/classify_text_with_bert.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View on GitHub</a>\n","  </td>\n","  <td>\n","    <a href=\"https://storage.googleapis.com/tensorflow_docs/text/docs/tutorials/classify_text_with_bert.ipynb\"><img src=\"https://www.tensorflow.org/images/download_logo_32px.png\" />Download notebook</a>\n","  </td>\n","  <td>\n","    <a href=\"https://tfhub.dev/google/collections/bert/1\"><img src=\"https://www.tensorflow.org/images/hub_logo_32px.png\" />See TF Hub model</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"IZ6SNYq_tVVC"},"source":["# Classify text with BERT\n","\n","This tutorial contains complete code to fine-tune BERT to perform sentiment analysis on a dataset of plain-text IMDB movie reviews.\n","In addition to training a model, you will learn how to preprocess text into an appropriate format.\n","\n","In this notebook, you will:\n","\n","- Load the IMDB dataset\n","- Load a BERT model from TensorFlow Hub\n","- Build your own model by combining BERT with a classifier\n","- Train your own model, fine-tuning BERT as part of that\n","- Save your model and use it to classify sentences\n","\n","If you're new to working with the IMDB dataset, please see [Basic text classification](https://www.tensorflow.org/tutorials/keras/text_classification) for more details."]},{"cell_type":"markdown","metadata":{"id":"2PHBpLPuQdmK"},"source":["## About BERT\n","\n","[BERT](https://arxiv.org/abs/1810.04805) and other Transformer encoder architectures have been wildly successful on a variety of tasks in NLP (natural language processing). They compute vector-space representations of natural language that are suitable for use in deep learning models. The BERT family of models uses the Transformer encoder architecture to process each token of input text in the full context of all tokens before and after, hence the name: Bidirectional Encoder Representations from Transformers. \n","\n","BERT models are usually pre-trained on a large corpus of text, then fine-tuned for specific tasks.\n"]},{"cell_type":"markdown","metadata":{"id":"SCjmX4zTCkRK"},"source":["## Setup\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q-YbjCkzw0yU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654932393737,"user_tz":-540,"elapsed":10821,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"4e3174a8-677f-41ec-b79a-cd36b2a495de"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 4.9 MB 4.4 MB/s \n","\u001b[?25h"]}],"source":["# A dependency of the preprocessing for BERT inputs\n","!pip install -q -U \"tensorflow-text==2.8.*\""]},{"cell_type":"markdown","metadata":{"id":"5w_XlxN1IsRJ"},"source":["You will use the AdamW optimizer from [tensorflow/models](https://github.com/tensorflow/models)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b-P1ZOA0FkVJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654932427185,"user_tz":-540,"elapsed":33456,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"eb651a3b-1e79-498c-8d03-a57d6615ce6c"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 1.8 MB 4.2 MB/s \n","\u001b[K     |████████████████████████████████| 92 kB 12.5 MB/s \n","\u001b[K     |████████████████████████████████| 352 kB 63.1 MB/s \n","\u001b[K     |████████████████████████████████| 237 kB 66.1 MB/s \n","\u001b[K     |████████████████████████████████| 1.1 MB 51.1 MB/s \n","\u001b[K     |████████████████████████████████| 48.3 MB 89 kB/s \n","\u001b[K     |████████████████████████████████| 99 kB 7.9 MB/s \n","\u001b[K     |████████████████████████████████| 596 kB 52.4 MB/s \n","\u001b[K     |████████████████████████████████| 1.2 MB 45.7 MB/s \n","\u001b[K     |████████████████████████████████| 43 kB 1.2 MB/s \n","\u001b[?25h  Building wheel for py-cpuinfo (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for seqeval (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install -q tf-models-official==2.7.0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_XgTpm9ZxoN9"},"outputs":[],"source":["import os\n","import shutil\n","\n","import tensorflow as tf\n","import tensorflow_hub as hub\n","import tensorflow_text as text\n","from official.nlp import optimization  # to create AdamW optimizer\n","\n","import matplotlib.pyplot as plt\n","\n","tf.get_logger().setLevel('ERROR')"]},{"cell_type":"markdown","metadata":{"id":"q6MugfEgDRpY"},"source":["## Sentiment analysis\n","\n","This notebook trains a sentiment analysis model to classify movie reviews as *positive* or *negative*, based on the text of the review.\n","\n","You'll use the [Large Movie Review Dataset](https://ai.stanford.edu/~amaas/data/sentiment/) that contains the text of 50,000 movie reviews from the [Internet Movie Database](https://www.imdb.com/)."]},{"cell_type":"markdown","metadata":{"id":"Vnvd4mrtPHHV"},"source":["### Download the IMDB dataset\n","\n","Let's download and extract the dataset, then explore the directory structure.\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b8vZW3g9it3b","executionInfo":{"status":"ok","timestamp":1654932478686,"user_tz":-540,"elapsed":47582,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"081daa53-d3b0-4f72-9fc3-d6f9c8be55c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!pip install pandas\n","import pandas as pd\n","\n","infile = r'/content/drive/MyDrive/train.csv'\n","df = pd.read_csv(infile, nrows=151593)\n","\n","infile = r'/content/drive/MyDrive/test.csv'\n","test = pd.read_csv(infile, nrows=7978)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"39BfvkMqj6Gi","executionInfo":{"status":"ok","timestamp":1654932484608,"user_tz":-540,"elapsed":5945,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"1e8e9ed6-a8c7-4c38-aa88-fe47b083db42"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.3.5)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.21.6)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2022.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"]}]},{"cell_type":"code","source":["train_sentences = df[\"comment_text\"].fillna(\"CVxTz\").values\n","test_sentences = test[\"comment_text\"].fillna(\"CVxTz\").values\n","list_classes = [\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]\n","train_y = df[list_classes].values\n","test_y = test[list_classes].values"],"metadata":{"id":"1hkjNnz8kcV5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dX8FtlpGJRE6"},"source":["## Loading models from TensorFlow Hub\n","\n","Here you can choose which BERT model you will load from TensorFlow Hub and fine-tune. There are multiple BERT models available.\n","\n","  - [BERT-Base](https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/3), [Uncased](https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/3) and [seven more models](https://tfhub.dev/google/collections/bert/1) with trained weights released by the original BERT authors.\n","  - [Small BERTs](https://tfhub.dev/google/collections/bert/1) have the same general architecture but fewer and/or smaller Transformer blocks, which lets you explore tradeoffs between speed, size and quality.\n","  - [ALBERT](https://tfhub.dev/google/collections/albert/1): four different sizes of \"A Lite BERT\" that reduces model size (but not computation time) by sharing parameters between layers.\n","  - [BERT Experts](https://tfhub.dev/google/collections/experts/bert/1): eight models that all have the BERT-base architecture but offer a choice between different pre-training domains, to align more closely with the target task.\n","  - [Electra](https://tfhub.dev/google/collections/electra/1) has the same architecture as BERT (in three different sizes), but gets pre-trained as a discriminator in a set-up that resembles a Generative Adversarial Network (GAN).\n","  - BERT with Talking-Heads Attention and Gated GELU [[base](https://tfhub.dev/tensorflow/talkheads_ggelu_bert_en_base/1), [large](https://tfhub.dev/tensorflow/talkheads_ggelu_bert_en_large/1)] has two improvements to the core of the Transformer architecture.\n","\n","The model documentation on TensorFlow Hub has more details and references to the\n","research literature. Follow the links above, or click on the [`tfhub.dev`](http://tfhub.dev) URL\n","printed after the next cell execution.\n","\n","The suggestion is to start with a Small BERT (with fewer parameters) since they are faster to fine-tune. If you like a small model but with higher accuracy, ALBERT might be your next option. If you want even better accuracy, choose\n","one of the classic BERT sizes or their recent refinements like Electra, Talking Heads, or a BERT Expert.\n","\n","Aside from the models available below, there are [multiple versions](https://tfhub.dev/google/collections/transformer_encoders_text/1) of the models that are larger and can yield even better accuracy, but they are too big to be fine-tuned on a single GPU. You will be able to do that on the [Solve GLUE tasks using BERT on a TPU colab](https://www.tensorflow.org/text/tutorials/bert_glue).\n","\n","You'll see in the code below that switching the tfhub.dev URL is enough to try any of these models, because all the differences between them are encapsulated in the SavedModels from TF Hub."]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","id":"y8_ctG55-uTX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654932484609,"user_tz":-540,"elapsed":14,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"8dd626e2-50f3-45c5-c568-dcd8e29e0052"},"outputs":[{"output_type":"stream","name":"stdout","text":["BERT model selected           : https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1\n","Preprocess model auto-selected: https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3\n"]}],"source":["#@title Choose a BERT model to fine-tune\n","\n","bert_model_name = 'small_bert/bert_en_uncased_L-4_H-512_A-8'  #@param [\"bert_en_uncased_L-12_H-768_A-12\", \"bert_en_cased_L-12_H-768_A-12\", \"bert_multi_cased_L-12_H-768_A-12\", \"small_bert/bert_en_uncased_L-2_H-128_A-2\", \"small_bert/bert_en_uncased_L-2_H-256_A-4\", \"small_bert/bert_en_uncased_L-2_H-512_A-8\", \"small_bert/bert_en_uncased_L-2_H-768_A-12\", \"small_bert/bert_en_uncased_L-4_H-128_A-2\", \"small_bert/bert_en_uncased_L-4_H-256_A-4\", \"small_bert/bert_en_uncased_L-4_H-512_A-8\", \"small_bert/bert_en_uncased_L-4_H-768_A-12\", \"small_bert/bert_en_uncased_L-6_H-128_A-2\", \"small_bert/bert_en_uncased_L-6_H-256_A-4\", \"small_bert/bert_en_uncased_L-6_H-512_A-8\", \"small_bert/bert_en_uncased_L-6_H-768_A-12\", \"small_bert/bert_en_uncased_L-8_H-128_A-2\", \"small_bert/bert_en_uncased_L-8_H-256_A-4\", \"small_bert/bert_en_uncased_L-8_H-512_A-8\", \"small_bert/bert_en_uncased_L-8_H-768_A-12\", \"small_bert/bert_en_uncased_L-10_H-128_A-2\", \"small_bert/bert_en_uncased_L-10_H-256_A-4\", \"small_bert/bert_en_uncased_L-10_H-512_A-8\", \"small_bert/bert_en_uncased_L-10_H-768_A-12\", \"small_bert/bert_en_uncased_L-12_H-128_A-2\", \"small_bert/bert_en_uncased_L-12_H-256_A-4\", \"small_bert/bert_en_uncased_L-12_H-512_A-8\", \"small_bert/bert_en_uncased_L-12_H-768_A-12\", \"albert_en_base\", \"electra_small\", \"electra_base\", \"experts_pubmed\", \"experts_wiki_books\", \"talking-heads_base\"]\n","\n","map_name_to_handle = {\n","    'bert_en_uncased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/3',\n","    'bert_en_cased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_cased_L-12_H-768_A-12/3',\n","    'bert_multi_cased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_multi_cased_L-12_H-768_A-12/3',\n","    'small_bert/bert_en_uncased_L-2_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-128_A-2/1',\n","    'small_bert/bert_en_uncased_L-2_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-256_A-4/1',\n","    'small_bert/bert_en_uncased_L-2_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-512_A-8/1',\n","    'small_bert/bert_en_uncased_L-2_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-768_A-12/1',\n","    'small_bert/bert_en_uncased_L-4_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-128_A-2/1',\n","    'small_bert/bert_en_uncased_L-4_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-256_A-4/1',\n","    'small_bert/bert_en_uncased_L-4_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1',\n","    'small_bert/bert_en_uncased_L-4_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-768_A-12/1',\n","    'small_bert/bert_en_uncased_L-6_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-128_A-2/1',\n","    'small_bert/bert_en_uncased_L-6_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-256_A-4/1',\n","    'small_bert/bert_en_uncased_L-6_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-512_A-8/1',\n","    'small_bert/bert_en_uncased_L-6_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-768_A-12/1',\n","    'small_bert/bert_en_uncased_L-8_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-128_A-2/1',\n","    'small_bert/bert_en_uncased_L-8_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-256_A-4/1',\n","    'small_bert/bert_en_uncased_L-8_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-512_A-8/1',\n","    'small_bert/bert_en_uncased_L-8_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-768_A-12/1',\n","    'small_bert/bert_en_uncased_L-10_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-128_A-2/1',\n","    'small_bert/bert_en_uncased_L-10_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-256_A-4/1',\n","    'small_bert/bert_en_uncased_L-10_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-512_A-8/1',\n","    'small_bert/bert_en_uncased_L-10_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-768_A-12/1',\n","    'small_bert/bert_en_uncased_L-12_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-128_A-2/1',\n","    'small_bert/bert_en_uncased_L-12_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-256_A-4/1',\n","    'small_bert/bert_en_uncased_L-12_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-512_A-8/1',\n","    'small_bert/bert_en_uncased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-768_A-12/1',\n","    'albert_en_base':\n","        'https://tfhub.dev/tensorflow/albert_en_base/2',\n","    'electra_small':\n","        'https://tfhub.dev/google/electra_small/2',\n","    'electra_base':\n","        'https://tfhub.dev/google/electra_base/2',\n","    'experts_pubmed':\n","        'https://tfhub.dev/google/experts/bert/pubmed/2',\n","    'experts_wiki_books':\n","        'https://tfhub.dev/google/experts/bert/wiki_books/2',\n","    'talking-heads_base':\n","        'https://tfhub.dev/tensorflow/talkheads_ggelu_bert_en_base/1',\n","}\n","\n","map_model_to_preprocess = {\n","    'bert_en_uncased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'bert_en_cased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_cased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-2_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-2_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-2_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-2_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-4_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-4_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-4_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-4_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-6_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-6_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-6_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-6_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-8_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-8_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-8_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-8_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-10_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-10_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-10_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-10_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-12_H-128_A-2':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-12_H-256_A-4':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-12_H-512_A-8':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'small_bert/bert_en_uncased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'bert_multi_cased_L-12_H-768_A-12':\n","        'https://tfhub.dev/tensorflow/bert_multi_cased_preprocess/3',\n","    'albert_en_base':\n","        'https://tfhub.dev/tensorflow/albert_en_preprocess/3',\n","    'electra_small':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'electra_base':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'experts_pubmed':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'experts_wiki_books':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","    'talking-heads_base':\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n","}\n","\n","tfhub_handle_encoder = map_name_to_handle[bert_model_name]\n","tfhub_handle_preprocess = map_model_to_preprocess[bert_model_name]\n","\n","print(f'BERT model selected           : {tfhub_handle_encoder}')\n","print(f'Preprocess model auto-selected: {tfhub_handle_preprocess}')"]},{"cell_type":"markdown","metadata":{"id":"7WrcxxTRDdHi"},"source":["## The preprocessing model\n","\n","Text inputs need to be transformed to numeric token ids and arranged in several Tensors before being input to BERT. TensorFlow Hub provides a matching preprocessing model for each of the BERT models discussed above, which implements this transformation using TF ops from the TF.text library. It is not necessary to run pure Python code outside your TensorFlow model to preprocess text.\n","\n","The preprocessing model must be the one referenced by the documentation of the BERT model, which you can read at the URL printed above. For BERT models from the drop-down above, the preprocessing model is selected automatically.\n","\n","Note: You will load the preprocessing model into a [hub.KerasLayer](https://www.tensorflow.org/hub/api_docs/python/hub/KerasLayer) to compose your fine-tuned model. This is the preferred API to load a TF2-style SavedModel from TF Hub into a Keras model."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0SQi-jWd_jzq"},"outputs":[],"source":["bert_preprocess_model = hub.KerasLayer(tfhub_handle_preprocess)"]},{"cell_type":"markdown","metadata":{"id":"x4naBiEE_cZX"},"source":["Let's try the preprocessing model on some text and see the output:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r9-zCzJpnuwS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654932494060,"user_tz":-540,"elapsed":1298,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"c5b45065-46e5-4df3-8799-1219a11d1a56"},"outputs":[{"output_type":"stream","name":"stdout","text":["Keys       : ['input_type_ids', 'input_word_ids', 'input_mask']\n","Shape      : (1, 128)\n","Word Ids   : [ 101 2023 2003 2107 2019 6429 3185 7592 2088 2023 2023 2023]\n","Input Mask : [1 1 1 1 1 1 1 1 1 1 1 1]\n","Type Ids   : [0 0 0 0 0 0 0 0 0 0 0 0]\n"]}],"source":["text_test = ['this is such an amazing movie hello world this this this this']\n","text_preprocessed = bert_preprocess_model(text_test)\n","\n","print(f'Keys       : {list(text_preprocessed.keys())}')\n","print(f'Shape      : {text_preprocessed[\"input_word_ids\"].shape}')\n","print(f'Word Ids   : {text_preprocessed[\"input_word_ids\"][0, :12]}')\n","print(f'Input Mask : {text_preprocessed[\"input_mask\"][0, :12]}')\n","print(f'Type Ids   : {text_preprocessed[\"input_type_ids\"][0, :12]}')"]},{"cell_type":"markdown","metadata":{"id":"EqL7ihkN_862"},"source":["As you can see, now you have the 3 outputs from the preprocessing that a BERT model would use (`input_words_id`, `input_mask` and `input_type_ids`).\n","\n","Some other important points:\n","- The input is truncated to 128 tokens. The number of tokens can be customized, and you can see more details on the [Solve GLUE tasks using BERT on a TPU colab](https://www.tensorflow.org/text/tutorials/bert_glue).\n","- The `input_type_ids` only have one value (0) because this is a single sentence input. For a multiple sentence input, it would have one number for each input.\n","\n","Since this text preprocessor is a TensorFlow model, It can be included in your model directly."]},{"cell_type":"markdown","metadata":{"id":"DKnLPSEmtp9i"},"source":["## Using the BERT model\n","\n","Before putting BERT into your own model, let's take a look at its outputs. You will load it from TF Hub and see the returned values."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tXxYpK8ixL34"},"outputs":[],"source":["bert_model = hub.KerasLayer(tfhub_handle_encoder)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_OoF9mebuSZc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654932508456,"user_tz":-540,"elapsed":3942,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"37e39d89-c518-49b7-dfb4-28519e2ec244"},"outputs":[{"output_type":"stream","name":"stdout","text":["Loaded BERT: https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1\n","Pooled Outputs Shape:(1, 512)\n","Pooled Outputs Values:[ 0.659554    0.99247175 -0.20069517 -0.0243138  -0.10664564 -0.28435144\n","  0.5809562  -0.9776451   0.22519302 -0.90453523  0.0800096  -0.94108737]\n","Sequence Outputs Shape:(1, 128, 512)\n","Sequence Outputs Values:[[-4.0871054e-01  1.2378422e-01 -1.6786689e-01 ... -9.5872931e-02\n","   1.4926961e-01  5.7529926e-01]\n"," [-3.2418072e-01  1.6972870e-02 -4.0875401e-02 ...  1.5031765e-01\n","  -5.5104548e-01  1.3077865e+00]\n"," [-8.6727262e-01  2.7121329e-01 -7.9709411e-01 ... -2.3393869e-02\n","  -6.4445305e-01  9.4207048e-01]\n"," ...\n"," [-1.0665574e+00  1.8435189e-01  5.0241166e-01 ...  1.9345257e-01\n","   3.6546600e-01  6.8220150e-01]\n"," [-1.0408225e+00  4.6031490e-02  3.2615468e-01 ...  7.9861216e-02\n","   3.0911225e-01  6.0599637e-01]\n"," [-8.2685250e-01  9.2185393e-02  9.0138361e-02 ...  7.8152865e-04\n","   4.9573889e-01  4.3293571e-01]]\n"]}],"source":["bert_results = bert_model(text_preprocessed)\n","\n","print(f'Loaded BERT: {tfhub_handle_encoder}')\n","print(f'Pooled Outputs Shape:{bert_results[\"pooled_output\"].shape}')\n","print(f'Pooled Outputs Values:{bert_results[\"pooled_output\"][0, :12]}')\n","print(f'Sequence Outputs Shape:{bert_results[\"sequence_output\"].shape}')\n","print(f'Sequence Outputs Values:{bert_results[\"sequence_output\"][0, :12]}')"]},{"cell_type":"markdown","metadata":{"id":"sm61jDrezAll"},"source":["The BERT models return a map with 3 important keys: `pooled_output`, `sequence_output`, `encoder_outputs`:\n","\n","- `pooled_output` represents each input sequence as a whole. The shape is `[batch_size, H]`. You can think of this as an embedding for the entire movie review.\n","- `sequence_output` represents each input token in the context. The shape is `[batch_size, seq_length, H]`. You can think of this as a contextual embedding for every token in the movie review.\n","- `encoder_outputs` are the intermediate activations of the `L` Transformer blocks. `outputs[\"encoder_outputs\"][i]` is a Tensor of shape `[batch_size, seq_length, 1024]` with the outputs of the i-th Transformer block, for `0 <= i < L`. The last value of the list is equal to `sequence_output`.\n","\n","For the fine-tuning you are going to use the `pooled_output` array."]},{"cell_type":"markdown","metadata":{"id":"pDNKfAXbDnJH"},"source":["## Define your model\n","\n","You will create a very simple fine-tuned model, with the preprocessing model, the selected BERT model, one Dense and a Dropout layer.\n","\n","Note: for more information about the base model's input and output you can follow the model's URL for documentation. Here specifically, you don't need to worry about it because the preprocessing model will take care of that for you.\n"]},{"cell_type":"code","source":["!pip install keras-nlp --upgrade\n","import keras_nlp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sy7gT6SX-yDh","executionInfo":{"status":"ok","timestamp":1654932519366,"user_tz":-540,"elapsed":10266,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"5a6f7d14-9334-4cb3-cce1-82804109ff87"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting keras-nlp\n","  Downloading keras_nlp-0.2.0-py3-none-any.whl (110 kB)\n","\u001b[K     |████████████████████████████████| 110 kB 5.0 MB/s \n","\u001b[?25hRequirement already satisfied: tensorflow-text in /usr/local/lib/python3.7/dist-packages (from keras-nlp) (2.8.2)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (from keras-nlp) (1.0.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras-nlp) (1.21.6)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.7/dist-packages (from keras-nlp) (2.8.2+zzzcolab20220527125636)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from keras-nlp) (21.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from absl-py->keras-nlp) (1.15.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->keras-nlp) (3.0.9)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (1.14.1)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (1.1.2)\n","Requirement already satisfied: keras<2.9,>=2.8.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (2.8.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (1.1.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (3.3.0)\n","Requirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (2.0)\n","Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (2.8.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (57.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (1.6.3)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (3.1.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (1.46.3)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (4.2.0)\n","Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (0.5.3)\n","Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (3.17.3)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (0.2.0)\n","Requirement already satisfied: tensorflow-estimator<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (2.8.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (0.26.0)\n","Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow->keras-nlp) (14.0.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow->keras-nlp) (0.37.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow->keras-nlp) (1.5.2)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (1.35.0)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (2.23.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (1.0.1)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (0.4.6)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (3.3.7)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (0.6.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (1.8.1)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (4.8)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (4.2.4)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (4.11.4)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (3.8.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (0.4.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (2022.5.18.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (3.0.4)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow->keras-nlp) (3.2.0)\n","Requirement already satisfied: tensorflow-hub>=0.8.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-text->keras-nlp) (0.12.0)\n","Installing collected packages: keras-nlp\n","Successfully installed keras-nlp-0.2.0\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aksj743St9ga"},"outputs":[],"source":["heads = 32\n","key_dim = 512\n","\n","def build_classifier_model():\n","  text_input = tf.keras.layers.Input(shape=(), dtype=tf.string, name='text')\n","  preprocessing_layer = hub.KerasLayer(tfhub_handle_preprocess, name='preprocessing')\n","  encoder_inputs = preprocessing_layer(text_input)\n","  encoder = hub.KerasLayer(tfhub_handle_encoder, trainable=True, name='BERT_encoder')\n","  enc_outputs = encoder(encoder_inputs)\n","\n","######################## Decoder inputs #################################################\n","  seq_output = enc_outputs[\"sequence_output\"]\n","  raw_words = encoder_inputs[\"input_word_ids\"]\n","  word_embeddings = tf.keras.layers.Embedding(30522, 512)(raw_words)\n","  position_embeddings = keras_nlp.layers.PositionEmbedding(\n","    sequence_length=128\n",")(word_embeddings)\n","  outputs = word_embeddings + position_embeddings # (None, 128, 512)\n","  words = tf.cast((tf.expand_dims(\n","    raw_words, axis=1, name=None\n",")), dtype = tf.float32)\n","#########################################################################################\n","\n","\n","########################## Decoder 1 ####################################################\n","  at1 = tf.keras.layers.MultiHeadAttention(num_heads=heads,key_dim=key_dim,)(query=outputs, value=outputs, key=outputs) # (None, 128, 512)\n","  norm1 = tf.keras.layers.LayerNormalization(axis=-1)(at1 + outputs) # (None, 128, 512)\n","  at2 = tf.keras.layers.MultiHeadAttention(num_heads=heads,key_dim=key_dim)(query=norm1, value=seq_output, key=seq_output) # (None, 128, 512)\n","  norm2 = tf.keras.layers.LayerNormalization(axis=-1)(norm1 + at2) # (None, 128, 512)\n","  net = tf.keras.layers.Dense(1024, activation='relu')(norm2)\n","  net = tf.keras.layers.Dropout(0.1)(net)\n","  net = tf.keras.layers.Dense(512, activation='relu')(net)\n","########################## Decoder 2 ####################################################\n","  at1 = tf.keras.layers.MultiHeadAttention(num_heads=heads,key_dim=key_dim,)(query=net, value=net, key=net) # (None, 128, 512)\n","  norm1 = tf.keras.layers.LayerNormalization(axis=-1)(at1 + net) # (None, 128, 512)\n","  at2 = tf.keras.layers.MultiHeadAttention(num_heads=heads,key_dim=key_dim)(query=norm1, value=seq_output, key=seq_output) # (None, 128, 512)\n","  norm2 = tf.keras.layers.LayerNormalization(axis=-1)(norm1 + at2) # (None, 128, 512)\n","  pool = tf.keras.layers.GlobalAveragePooling1D()(norm2) # (None, 512)\n","  net = tf.keras.layers.Dense(1024, activation='relu')(pool)\n","  net = tf.keras.layers.Dropout(0.1)(net)\n","  net = tf.keras.layers.Dense(512, activation='relu')(net)\n","  net = tf.keras.layers.LayerNormalization(axis=-1)(net+pool)\n","  net = tf.keras.layers.LayerNormalization(axis=-1)(net+enc_outputs['pooled_output'])\n","  net = tf.keras.layers.Dense(6, activation=None, name='classifier')(net)\n","  return tf.keras.Model(text_input, net)"]},{"cell_type":"markdown","metadata":{"id":"Zs4yhFraBuGQ"},"source":["Let's check that the model runs with the output of the preprocessing model."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mGMF8AZcB2Zy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654932538530,"user_tz":-540,"elapsed":19170,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"034d705a-fa3d-49ec-b001-ec928ff83d46"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor([[0.83496225 0.34480125 0.9459703  0.6186379  0.03639678 0.06645124]], shape=(1, 6), dtype=float32)\n"]}],"source":["classifier_model = build_classifier_model()\n","bert_raw_result = classifier_model(tf.constant(text_test))\n","print(tf.sigmoid(bert_raw_result))"]},{"cell_type":"markdown","metadata":{"id":"ZTUzNV2JE2G3"},"source":["The output is meaningless, of course, because the model has not been trained yet.\n","\n","Let's take a look at the model's structure."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0EmzyHZXKIpm","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1654932540513,"user_tz":-540,"elapsed":1990,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"fbb1ea83-f75b-4b22-c25f-07b254832f30"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Image object>"],"image/png":"\n"},"metadata":{},"execution_count":16}],"source":["tf.keras.utils.plot_model(classifier_model)"]},{"cell_type":"markdown","metadata":{"id":"WbUWoZMwc302"},"source":["## Model training\n","\n","You now have all the pieces to train a model, including the preprocessing module, BERT encoder, data, and classifier."]},{"cell_type":"markdown","metadata":{"id":"WpJ3xcwDT56v"},"source":["### Loss function\n","\n","Since this is a binary classification problem and the model outputs a probability (a single-unit layer), you'll use `losses.BinaryCrossentropy` loss function.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OWPOZE-L3AgE"},"outputs":[],"source":["loss = tf.keras.losses.BinaryCrossentropy(from_logits=True)\n","metrics = tf.metrics.BinaryAccuracy()"]},{"cell_type":"markdown","metadata":{"id":"77psrpfzbxtp"},"source":["### Optimizer\n","\n","For fine-tuning, let's use the same optimizer that BERT was originally trained with: the \"Adaptive Moments\" (Adam). This optimizer minimizes the prediction loss and does regularization by weight decay (not using moments), which is also known as [AdamW](https://arxiv.org/abs/1711.05101).\n","\n","For the learning rate (`init_lr`), you will use the same schedule as BERT pre-training: linear decay of a notional initial learning rate, prefixed with a linear warm-up phase over the first 10% of training steps (`num_warmup_steps`). In line with the BERT paper, the initial learning rate is smaller for fine-tuning (best of 5e-5, 3e-5, 2e-5)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P9eP2y9dbw32"},"outputs":[],"source":["epochs = 5\n","# steps_per_epoch = tf.data.experimental.cardinality(train_ds).numpy()\n","# num_train_steps = steps_per_epoch * epochs\n","# num_warmup_steps = int(0.1*num_train_steps)\n","\n","init_lr = 3e-5\n","# optimizer = optimization.create_optimizer(init_lr=init_lr,\n","#                                           # num_train_steps=num_train_steps,\n","#                                           # num_warmup_steps=num_warmup_steps,\n","#                                           optimizer_type='adamw')"]},{"cell_type":"markdown","metadata":{"id":"SqlarlpC_v0g"},"source":["### Loading the BERT model and training\n","\n","Using the `classifier_model` you created earlier, you can compile the model with the loss, metric and optimizer."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-7GPDhR98jsD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654932540515,"user_tz":-540,"elapsed":21,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"52de16be-218a-4d45-d189-201ca18bffad"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}],"source":["classifier_model.compile(optimizer=tf.keras.optimizers.Adam(lr=1e-4, decay=1e-6),\n","                         loss=loss,\n","                         metrics=metrics)"]},{"cell_type":"markdown","metadata":{"id":"CpBuV5j2cS_b"},"source":["Note: training time will vary depending on the complexity of the BERT model you have selected."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HtfDFAnN_Neu","colab":{"base_uri":"https://localhost:8080/"},"outputId":"391baf28-9d33-43d8-eb26-bc21e322842e","executionInfo":{"status":"ok","timestamp":1654952049352,"user_tz":-540,"elapsed":6317060,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Training model with https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1\n","Epoch 1/5\n","4264/4264 [==============================] - 3925s 917ms/step - loss: 0.0493 - binary_accuracy: 0.9814 - val_loss: 0.0481 - val_binary_accuracy: 0.9828\n","Epoch 2/5\n","4264/4264 [==============================] - 3909s 917ms/step - loss: 0.0388 - binary_accuracy: 0.9843 - val_loss: 0.0424 - val_binary_accuracy: 0.9841\n","Epoch 3/5\n","4264/4264 [==============================] - 3903s 915ms/step - loss: 0.0334 - binary_accuracy: 0.9860 - val_loss: 0.0443 - val_binary_accuracy: 0.9840\n","Epoch 4/5\n","4264/4264 [==============================] - 3886s 911ms/step - loss: 0.0285 - binary_accuracy: 0.9878 - val_loss: 0.0478 - val_binary_accuracy: 0.9833\n","Epoch 5/5\n","4264/4264 [==============================] - 3886s 911ms/step - loss: 0.0247 - binary_accuracy: 0.9895 - val_loss: 0.0526 - val_binary_accuracy: 0.9835\n"]}],"source":["print(f'Training model with {tfhub_handle_encoder}')\n","history = classifier_model.fit(\n","    x=train_sentences,\n","    y=train_y,\n","    validation_split=0.1,\n","                               epochs=epochs)"]},{"cell_type":"markdown","metadata":{"id":"uBthMlTSV8kn"},"source":["### Evaluate the model\n","\n","Let's see how the model performs. Two values will be returned. Loss (a number which represents the error, lower values are better), and accuracy."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"slqB-urBV9sP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654952191576,"user_tz":-540,"elapsed":142233,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"1524ee3a-e286-4bbc-88f0-c23b66837f11"},"outputs":[{"output_type":"stream","name":"stdout","text":["250/250 [==============================] - 87s 350ms/step - loss: 0.0582 - binary_accuracy: 0.9821\n","Loss: 0.058210138231515884\n","Accuracy: 0.9820549488067627\n"]}],"source":["loss, accuracy = classifier_model.evaluate(x=test_sentences, y=test_y,batch_size=32)\n","\n","print(f'Loss: {loss}')\n","print(f'Accuracy: {accuracy}')"]},{"cell_type":"markdown","metadata":{"id":"uttWpgmSfzq9"},"source":["### Plot the accuracy and loss over time\n","\n","Based on the `History` object returned by `model.fit()`. You can plot the training and validation loss for comparison, as well as the training and validation accuracy:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fiythcODf0xo"},"outputs":[],"source":["history_dict = history.history\n","print(history_dict.keys())\n","\n","acc = history_dict['binary_accuracy']\n","val_acc = history_dict['val_binary_accuracy']\n","loss = history_dict['loss']\n","val_loss = history_dict['val_loss']\n","\n","epochs = range(1, len(acc) + 1)\n","fig = plt.figure(figsize=(10, 6))\n","fig.tight_layout()\n","\n","plt.subplot(2, 1, 1)\n","# r is for \"solid red line\"\n","plt.plot(epochs, loss, 'r', label='Training loss')\n","# b is for \"solid blue line\"\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","# plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.subplot(2, 1, 2)\n","plt.plot(epochs, acc, 'r', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend(loc='lower right')"]},{"cell_type":"markdown","metadata":{"id":"WzJZCo-cf-Jf"},"source":["In this plot, the red lines represent the training loss and accuracy, and the blue lines are the validation loss and accuracy."]},{"cell_type":"code","source":["history_dict = history.history\n","print(history_dict.keys())\n","\n","acc = history_dict['binary_accuracy']\n","\n","epochs = range(1, len(acc) + 1)\n","fig = plt.figure(figsize=(10, 6))\n","fig.tight_layout()\n","\n","plt.subplot(2, 1, 1)\n","# r is for \"solid red line\"\n","plt.plot(epochs, loss, 'r', label='Training loss')\n","# b is for \"solid blue line\"\n","plt.title('Training loss')\n","# plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.subplot(2, 1, 2)\n","plt.plot(epochs, acc, 'r', label='Training acc')\n","plt.title('Training accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend(loc='lower right')"],"metadata":{"id":"8MCEtqImM1_6","colab":{"base_uri":"https://localhost:8080/","height":438},"executionInfo":{"status":"ok","timestamp":1654952192284,"user_tz":-540,"elapsed":709,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"b914dbcf-2d93-4a57-82b2-4cdc3f1fdf61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys(['loss', 'binary_accuracy', 'val_loss', 'val_binary_accuracy'])\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f5d8207a8d0>"]},"metadata":{},"execution_count":23},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x432 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Rtn7jewb6dg4"},"source":["## Export for inference\n","\n","Now you just save your fine-tuned model for later use."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ShcvqJAgVera","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654952207084,"user_tz":-540,"elapsed":14801,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"0b424763-728f-4c58-f9c9-3582f9211a8f"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as query_layer_call_fn, query_layer_call_and_return_conditional_losses, key_layer_call_fn, key_layer_call_and_return_conditional_losses, value_layer_call_fn while saving (showing 5 of 172). These functions will not be directly callable after loading.\n"]}],"source":["saved_model_path = \"/content/drive/MyDrive/bert_plus_2decoders_unshuffled\"\n","\n","classifier_model.save(saved_model_path, include_optimizer=False)"]},{"cell_type":"markdown","metadata":{"id":"PbI25bS1vD7s"},"source":["Let's reload the model, so you can try it side by side with the model that is still in memory."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gUEWVskZjEF0"},"outputs":[],"source":["reloaded_model = tf.saved_model.load(saved_model_path)"]},{"cell_type":"markdown","metadata":{"id":"oyTappHTvNCz"},"source":["Here you can test your model on any sentence you want, just add to the examples variable below."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VBWzH6exlCPS"},"outputs":[],"source":["def print_my_examples(inputs, results):\n","  result_for_printing = \\\n","    [f'input: {inputs[i]:<30} : score: {results[i][0]:.6f}'\n","                         for i in range(len(inputs))]\n","  print(*result_for_printing, sep='\\n')\n","  print()\n","\n","\n","examples = [\n","    'this is such an amazing movie!',  # this is the same sentence tried earlier\n","    'The movie was great!',\n","    'The movie was meh.',\n","    'The movie was okish.',\n","    'The movie was terrible...'\n","]\n","\n","reloaded_results = tf.sigmoid(reloaded_model(tf.constant(examples)))\n","original_results = tf.sigmoid(classifier_model(tf.constant(examples)))\n","\n","print('Results from the saved model:')\n","print_my_examples(examples, reloaded_results)\n","print('Results from the model in memory:')\n","print_my_examples(examples, original_results)"]},{"cell_type":"markdown","metadata":{"id":"3cOmih754Y_M"},"source":["If you want to use your model on [TF Serving](https://www.tensorflow.org/tfx/guide/serving), remember that it will call your SavedModel through one of its named signatures. In Python, you can test them as follows:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0FdVD3973S-O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654952219157,"user_tz":-540,"elapsed":20,"user":{"displayName":"Alexander Sharipov","userId":"03495357849991116244"}},"outputId":"6e17e8c6-273b-409c-8fc9-669394c4c155"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["input: this is such an amazing movie! : score: 0.000012\n","input: The movie was great!           : score: 0.000012\n","input: The movie was meh.             : score: 0.000054\n","input: The movie was okish.           : score: 0.000008\n","input: The movie was terrible...      : score: 0.000460\n","\n"]}],"source":["serving_results = reloaded_model \\\n","            .signatures['serving_default'](tf.constant(examples))\n","\n","serving_results = tf.sigmoid(serving_results['classifier'])\n","\n","print_my_examples(examples, serving_results)"]},{"cell_type":"markdown","metadata":{"id":"B4gN1KwReLPN"},"source":["## Next steps\n","\n","As a next step, you can try [Solve GLUE tasks using BERT on a TPU tutorial](https://www.tensorflow.org/text/tutorials/bert_glue), which runs on a TPU and shows you how to work with multiple inputs."]}],"metadata":{"colab":{"collapsed_sections":[],"name":"BERT with 2 decoders.ipynb","provenance":[{"file_id":"1l4zV9RcG-iIuwaulCPKWOnWzRXB3cjoI","timestamp":1655452502024},{"file_id":"16BavfvjnBlQV8qE2YyXgy8KSRsdcWEHR","timestamp":1654589396010},{"file_id":"11Tj_7t8pkaZe9HXllFQe4xtjzWYd3_wc","timestamp":1654583158034},{"file_id":"1QooEXBVm98TFaIhQH85OAaqabs0UimYh","timestamp":1654514153760},{"file_id":"https://github.com/tensorflow/text/blob/master/docs/tutorials/classify_text_with_bert.ipynb","timestamp":1654510418804}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}